[
    {
        "id": "e3f7c42bbb394f53",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "055c7f06666799a0",
        "type": "group",
        "z": "e3f7c42bbb394f53",
        "name": "Test - Show/Hide Modal",
        "style": {
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4c06c67d050f61bd",
            "cc0318fc5b7a966f",
            "cb4416edc1c9d33b",
            "7eab23c5f3a90f31",
            "4d70f3c7d9423bf2",
            "13aad0c9b6b70320",
            "2cb62bf5f7dea131"
        ],
        "x": 53,
        "y": 499,
        "w": 593,
        "h": 276
    },
    {
        "id": "51a58076f8fc9c94",
        "type": "group",
        "z": "e3f7c42bbb394f53",
        "name": "STEP 3",
        "style": {
            "fill": "#ffffff",
            "label": true,
            "fill-opacity": "0.39",
            "color": "#000000"
        },
        "nodes": [
            "7566f6994c2cfb40",
            "05734ddb19778f37",
            "bbc52227e30d307e",
            "afc3298052284bb5",
            "6df039a627bac2c9",
            "6c586af4a39aaa74",
            "e2f11d31c407c3bf",
            "585f0d70aec0f8f7",
            "9ad6dde8208dac25",
            "ea01ec9f115c1e6e",
            "b16466d96df8f002",
            "4ec6bc7fbe8d0381",
            "07ae8702afe539f6",
            "e34e8e965c56b51b",
            "5f63f24894c5c3d5",
            "35a731ae394a09f2",
            "216812d2c096025f"
        ],
        "x": 34,
        "y": 219,
        "w": 1652,
        "h": 262
    },
    {
        "id": "1ebed8c9ec751f58",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "TOKEN",
                "value": "577hIeub97BgpEbmbwm6cngLrg08VAQlJOMsz",
                "type": "str"
            }
        ]
    },
    {
        "id": "6d0c7de82f7adff3",
        "type": "websocket-listener",
        "path": "/ws/boeing777",
        "wholemsg": "false"
    },
    {
        "id": "56d706ad3d801c6c",
        "type": "http in",
        "z": "e3f7c42bbb394f53",
        "name": "",
        "url": "server",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "91c40bd3fa38a373"
            ]
        ]
    },
    {
        "id": "91c40bd3fa38a373",
        "type": "function",
        "z": "e3f7c42bbb394f53",
        "name": "show main form",
        "func": "if (msg.payload.pin && msg.payload.pin === '123777'){\n    msg.payload = {\n        \"topic\": \"admin\",\n        \"action\": {\n            \"show\": 1\n        }\n    }\n}\n\nif (msg.payload.topic === \"acknowledgment\" && msg.payload.message ===\"ok\"){\n    msg.payload = {\n        \"topic\": \"main\",\n        \"action\": {\n            \"show\": 1\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 140,
        "wires": [
            [
                "a437d9ab9db0cba5",
                "ba7d8c063e92c2d7"
            ]
        ]
    },
    {
        "id": "a437d9ab9db0cba5",
        "type": "http response",
        "z": "e3f7c42bbb394f53",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 140,
        "wires": []
    },
    {
        "id": "a1d5b4e8e61ada14",
        "type": "http in",
        "z": "e3f7c42bbb394f53",
        "name": "",
        "url": "/dados",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "2871a0f822f5b466"
            ]
        ]
    },
    {
        "id": "2871a0f822f5b466",
        "type": "function",
        "z": "e3f7c42bbb394f53",
        "name": "Set Request: Get Sheet Details",
        "func": "msg.pageSize =  100; // Tamanho da página, ajuste conforme necessário\nmsg.page =  1; // Página inicial\n\nmsg.method = \"GET\";\nmsg.url = \"https://api.smartsheet.com/2.0/sheets/3603440861138820?pageSize=\" + msg.pageSize + \"&page=\" + msg.page;\nmsg.headers = {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + env.get('TOKEN')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "cdcccac8bc8756b8"
            ]
        ]
    },
    {
        "id": "cdcccac8bc8756b8",
        "type": "http request",
        "z": "e3f7c42bbb394f53",
        "name": "HTTP Request: Get Sheet Details",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 180,
        "wires": [
            [
                "ed705aba109df612"
            ]
        ]
    },
    {
        "id": "ed705aba109df612",
        "type": "http response",
        "z": "e3f7c42bbb394f53",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 180,
        "wires": []
    },
    {
        "id": "ba7d8c063e92c2d7",
        "type": "websocket out",
        "z": "e3f7c42bbb394f53",
        "name": "",
        "server": "6d0c7de82f7adff3",
        "client": "",
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "4c06c67d050f61bd",
        "type": "inject",
        "z": "e3f7c42bbb394f53",
        "g": "055c7f06666799a0",
        "name": "show main form",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"topic\":\"main\",\"action\":{\"show\":1}}",
        "payloadType": "json",
        "x": 180,
        "y": 540,
        "wires": [
            [
                "2cb62bf5f7dea131"
            ]
        ]
    },
    {
        "id": "cc0318fc5b7a966f",
        "type": "inject",
        "z": "e3f7c42bbb394f53",
        "g": "055c7f06666799a0",
        "name": "hide main form",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"topic\":\"main\",\"action\":{\"show\":0}}",
        "payloadType": "json",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "2cb62bf5f7dea131"
            ]
        ]
    },
    {
        "id": "cb4416edc1c9d33b",
        "type": "inject",
        "z": "e3f7c42bbb394f53",
        "g": "055c7f06666799a0",
        "name": "show modal",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"topic\":\"modal\",\"action\":{\"show\":1}}",
        "payloadType": "json",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "2cb62bf5f7dea131"
            ]
        ]
    },
    {
        "id": "7eab23c5f3a90f31",
        "type": "inject",
        "z": "e3f7c42bbb394f53",
        "g": "055c7f06666799a0",
        "name": "hide modal",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"topic\":\"modal\",\"action\":{\"show\":0}}",
        "payloadType": "json",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "2cb62bf5f7dea131"
            ]
        ]
    },
    {
        "id": "4d70f3c7d9423bf2",
        "type": "inject",
        "z": "e3f7c42bbb394f53",
        "g": "055c7f06666799a0",
        "name": "show acknowledgment",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"topic\":\"acknowledgment\",\"action\":{\"show\":1}}",
        "payloadType": "json",
        "x": 199,
        "y": 694,
        "wires": [
            [
                "2cb62bf5f7dea131"
            ]
        ]
    },
    {
        "id": "13aad0c9b6b70320",
        "type": "inject",
        "z": "e3f7c42bbb394f53",
        "g": "055c7f06666799a0",
        "name": "hide acknowledgment",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"topic\":\"acknowledgment\",\"action\":{\"show\":0}}",
        "payloadType": "json",
        "x": 199,
        "y": 734,
        "wires": [
            [
                "2cb62bf5f7dea131"
            ]
        ]
    },
    {
        "id": "2cb62bf5f7dea131",
        "type": "websocket out",
        "z": "e3f7c42bbb394f53",
        "g": "055c7f06666799a0",
        "name": "",
        "server": "6d0c7de82f7adff3",
        "client": "",
        "x": 530,
        "y": 540,
        "wires": []
    },
    {
        "id": "7566f6994c2cfb40",
        "type": "http request",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "HTTP Request: Add Row to Sheet",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 880,
        "y": 360,
        "wires": [
            [
                "bbc52227e30d307e",
                "afc3298052284bb5",
                "6df039a627bac2c9",
                "5f63f24894c5c3d5"
            ]
        ]
    },
    {
        "id": "05734ddb19778f37",
        "type": "function",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "Set Request: Add Row to Sheet",
        "func": "var sheetId = \"2729210703466372\";\n\nmsg.method = \"POST\";\nmsg.url = \"https://api.smartsheet.com/2.0/sheets/\" + sheetId + \"/rows\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + env.get('TOKEN')\n};\n\n// Payload coming from the previous node\nvar payload = msg.payload;\nmsg.origin = payload;\n\n/**\n * Function to create the cell structure for all hooks.\n * @returns {Array} Array of cell objects for the Smartsheet API.\n */\nfunction createCells() {\n    // Initial cell data for fixed fields\n    let cells = [\n        { \"columnId\": 8582310908874628, \"value\": payload.location || '', \"strict\": false }, // Crane & Hoist Location (TEXT_NUMBER)\n        { \"columnId\": 419536584265604, \"value\": payload.serial || '', \"strict\": false }, // Hoist Serial # (TEXT_NUMBER)\n        { \"columnId\": 4923136211636100, \"value\": payload.model || '', \"strict\": false }, // Model (TEXT_NUMBER)\n        { \"columnId\": 2671336397950852, \"value\": payload.question1 || 'N', \"strict\": false }, // Functional mechanisms condition? (PICKLIST)\n        { \"columnId\": 7174936025321348, \"value\": payload.question2 || 'N', \"strict\": false }, // Mechanisms aligned properly? (PICKLIST)\n        { \"columnId\": 1545436491108228, \"value\": payload.question2a || 'N', \"strict\": false }, // Check hoist movement on trolley (PICKLIST)\n        { \"columnId\": 6049036118478724, \"value\": payload.question2b || 'N', \"strict\": false }, // Test vertical movement of hook (PICKLIST)\n        { \"columnId\": 3797236304793476, \"value\": payload.question3 || 'N', \"strict\": false }, // Mechanisms visibly deteriorating? (PICKLIST)\n    ];\n\n    // Mapping of columnId for the hooks\n    const hookColumnIds = [\n        { sn: 8300835932163972, cracks: 982486537686916, throat: 5486086165057412, twisted: 3234286351372164 },\n        { sn: 2375791351648132, cracks: 4627591165333380, throat: 123991537962884, twisted: 8920084560170884 },\n        { sn: 3133595381354372, cracks: 5385395195039620, throat: 881795567669124, twisted: 8200144962146180 },\n        { sn: 6765041769729924, cracks: 2261442142359428, throat: 4513241956044676, twisted: 9642328674180 },\n        { sn: 7890941676572548, cracks: 3387342049202052, throat: 5639141862887300, twisted: 1135542235516804 },\n    ];\n\n    // Add hook data dynamically\n    payload.hooksData.forEach((hook, index) => {\n        if (index < hookColumnIds.length) { \n            cells.push(\n                { \"columnId\": hookColumnIds[index].sn, \"value\": hook.sn || '', \"strict\": false }, // Hook S/N (TEXT_NUMBER)\n                { \"columnId\": hookColumnIds[index].cracks, \"value\": hook.cracks || 'N', \"strict\": false }, // Hook Visible Cracks? (PICKLIST)\n                { \"columnId\": hookColumnIds[index].throat, \"value\": hook.throat || 'N', \"strict\": false }, // Hook Throat opening larger? (PICKLIST)\n                { \"columnId\": hookColumnIds[index].twisted, \"value\": hook.twisted || 'N', \"strict\": false } // Hook Twisted? (PICKLIST)\n            );\n        }\n    });\n\n    // Additional fixed fields\n    cells.push(\n        { \"columnId\": 7737885978742660, \"value\": payload.question5 || 'N', \"strict\": false }, // Slings & straps serial numbers legible? (PICKLIST)\n        { \"columnId\": 2108386444529540, \"value\": payload.question5a || 'N', \"strict\": false }, // Frayed edges on slings or straps? (PICKLIST)\n        { \"columnId\": 6611986071900036, \"value\": payload.question5b || 'N', \"strict\": false }, // Tape on slings or straps? (PICKLIST)\n        { \"columnId\": 4360186258214788, \"value\": payload.question6 || 'N', \"strict\": false }, // Lifting devices serial numbers legible? (PICKLIST)\n        { \"columnId\": 8863785885585284, \"value\": payload.question6a || 'N', \"strict\": false }, // Cracks or bends on fixtures? (PICKLIST)\n        { \"columnId\": 278799095910276, \"value\": payload.question6b || 'N', \"strict\": false }, // Excessive wear on fixtures? (PICKLIST)\n        { \"columnId\": 4782398723280772, \"value\": payload.question6c || 'N', \"strict\": false }, // Deformation on fixtures? (PICKLIST)\n        { \"columnId\": 2530598909595524, \"value\": payload.question7 || 'N', \"strict\": false }, // Ropes/cables serial number? (PICKLIST)\n        { \"columnId\": 7034198536966020, \"value\": payload.question7a || 'N', \"strict\": false }, // Reduction in rope diameter? (PICKLIST)\n        { \"columnId\": 1404699002752900, \"value\": payload.question7b || 'N', \"strict\": false }, // Broken/worn/corroded wires? (PICKLIST)\n        { \"columnId\": 5908298630123396, \"value\": payload.question7c || 'N', \"strict\": false }, // Severe kinking/cutting/unstrung ropes? (PICKLIST)\n        { \"columnId\": 3656498816438148, \"value\": payload.question8 || 'N', \"strict\": false }, // Safety hazard defects? (PICKLIST)\n        { \"columnId\": 8160098443808644, \"value\": payload.inspected_by, \"strict\": false }, // Inspected By (TEXT_NUMBER)\n        { \"columnId\": 841749049331588, \"value\": payload.date || '', \"strict\": false }, // Date (DATE)\n        { \"columnId\": 5345348676702084, \"value\": payload.email || '', \"strict\": false } // Email (TEXT_NUMBER)\n    );\n\n    return cells;\n}\n\n// Create an array of payloads for the row\nvar rows = [{ \"toTop\": true, \"cells\": createCells() }];\n\nmsg.payload = rows;\n\n// Log the payload for debugging\n// console.log(JSON.stringify(msg.payload, null, 2));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 360,
        "wires": [
            [
                "7566f6994c2cfb40",
                "b16466d96df8f002"
            ]
        ]
    },
    {
        "id": "bbc52227e30d307e",
        "type": "debug",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "Debug: Add Row to Sheet",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 420,
        "wires": []
    },
    {
        "id": "afc3298052284bb5",
        "type": "http response",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 300,
        "wires": []
    },
    {
        "id": "6df039a627bac2c9",
        "type": "function",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "hide main form",
        "func": "msg.payload = {\"topic\":\"main\",\"action\":{\"show\":0}}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 360,
        "wires": [
            [
                "585f0d70aec0f8f7"
            ]
        ]
    },
    {
        "id": "6c586af4a39aaa74",
        "type": "inject",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "Start Add Row to Sheet",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"hooks\":[{\"sn\":\"Voluptatem  \",\"cracks\":\"Y\",\"throat\":\"Y\",\"twisted\":\"Y\"},{\"sn\":\"Do est minus volupt\",\"cracks\":\"N\",\"throat\":\"Y\",\"twisted\":\"N\"},{\"sn\":\"Rerum animi \",\"hook_cracks\":\"N\",\"hook_throat\":\"Y\",\"hook_twisted\":\"Y\"},{\"sn\":\"Omnis proident dese\",\"hook_cracks\":\"Y\",\"hook_throat\":\"Y\",\"hook_twisted\":\"Y\"}],\"location\":\"Molestiae ab consect\",\"serial\":\"Dolor et deleniti ex\",\"model\":\"Proident voluptatem\",\"question1\":\"Y\",\"question2\":\"Y\",\"question2a\":\"N\",\"question2b\":\"Y\",\"question3\":\"N\",\"question5\":\"N/A\",\"question6\":\"Y\",\"question7\":\"N\",\"question7a\":\"N\",\"question7b\":\"Y\",\"question7c\":\"Y\",\"question8\":\"Y\",\"inspected_by\":\"Consectetur possimus\",\"date\":\"06/22/2024\",\"email\":\"caputo.marcos@gmail.com\"}",
        "payloadType": "json",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "05734ddb19778f37"
            ]
        ]
    },
    {
        "id": "e2f11d31c407c3bf",
        "type": "http in",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "",
        "url": "post",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "05734ddb19778f37",
                "9ad6dde8208dac25",
                "4ec6bc7fbe8d0381"
            ]
        ]
    },
    {
        "id": "585f0d70aec0f8f7",
        "type": "websocket out",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "",
        "server": "6d0c7de82f7adff3",
        "client": "",
        "x": 1410,
        "y": 360,
        "wires": []
    },
    {
        "id": "9ad6dde8208dac25",
        "type": "function",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "matrix check",
        "func": "// Template for comparison\nconst template = {\n    \"question1\": \"Y\",\n    \"question2\": \"Y\",\n    \"question3\": \"N\",\n    \"hook_cracks\": \"N\",\n    \"hook_throat\": \"N\",\n    \"hook_twisted\": \"N\",\n    \"question5\": \"Y\",\n    \"question5a\": \"N\",\n    \"question5b\": \"N\",\n    \"question6\": \"Y\",\n    \"question6a\": \"N\",\n    \"question6b\": \"N\",\n    \"question6c\": \"N\",\n    \"question7\": \"Y\",\n    \"question7a\": \"N\",\n    \"question7b\": \"N\",\n    \"question7c\": \"N\",\n    \"question8\": \"N\"\n};\n\n// Initialize result object\nlet result = {\n    matchesTemplate: true,\n    mismatches: []\n};\n\n// Check each question and condition\nfunction checkQuestion(question, expectedValue) {\n    if (msg.payload[question] !== expectedValue) {\n        result.matchesTemplate = false;\n        result.mismatches.push({\n            question: question,\n            expected: expectedValue,\n            received: msg.payload[question]\n        });\n    }\n}\n\n// Compare each item in the template\nfor (let question in template) {\n    if (template.hasOwnProperty(question)) {\n        checkQuestion(question, template[question]);\n    }\n}\n\n// Output the result\nif (result){\n    return [null, result];\n} else {\n    return [msg, null]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 420,
        "wires": [
            [
                "ea01ec9f115c1e6e",
                "07ae8702afe539f6"
            ],
            [
                "b16466d96df8f002"
            ]
        ]
    },
    {
        "id": "ea01ec9f115c1e6e",
        "type": "debug",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "TRUE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 400,
        "wires": []
    },
    {
        "id": "b16466d96df8f002",
        "type": "debug",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "FALSE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 440,
        "wires": []
    },
    {
        "id": "4ec6bc7fbe8d0381",
        "type": "debug",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "TRUE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 440,
        "wires": []
    },
    {
        "id": "07ae8702afe539f6",
        "type": "link out",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "link out 777",
        "mode": "link",
        "links": [
            "9985c63703612a1a"
        ],
        "x": 515,
        "y": 400,
        "wires": []
    },
    {
        "id": "e34e8e965c56b51b",
        "type": "comment",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "CALL 777",
        "info": "",
        "x": 600,
        "y": 400,
        "wires": []
    },
    {
        "id": "5f63f24894c5c3d5",
        "type": "function",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "Set Request: Email",
        "func": "if (msg.payload.result) {\n    var sheetId = \"2729210703466372\";\n    const rowId = msg.payload.result[0].id;\n\n    msg.method = \"POST\";\n    msg.url = `https://api.smartsheet.com/2.0/sheets/${sheetId}/rows/emails`;\n    msg.headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + env.get('TOKEN')\n    };\n\n    msg.payload = {\n        // \"sendTo\": [\n        //     { \"email\": \"recipient@smartsheet.com\" }\n        // ],\n        \"sendTo\": [\n            { \"email\": \"dustin.p.greene@boeing.com\" },\n            { \"email\": \"lauren.a.greene@boeing.com\" }\n        ],        \n        \"subject\": \"Check these rows out!\",\n        \"message\": \"Here are the rows I mentioned in our meeting\",\n        \"ccMe\": false,\n        \"rowIds\": [\n            rowId\n        ],\n        // \"columnIds\": [\n        //     5190835902932868, 3791509922310020\n        // ],\n        \"includeAttachments\": true,\n        \"includeDiscussions\": false\n    };\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 260,
        "wires": [
            [
                "35a731ae394a09f2"
            ]
        ]
    },
    {
        "id": "35a731ae394a09f2",
        "type": "http request",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "HTTP Request: Add Row to Sheet",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1240,
        "y": 260,
        "wires": [
            [
                "216812d2c096025f"
            ]
        ]
    },
    {
        "id": "216812d2c096025f",
        "type": "debug",
        "z": "e3f7c42bbb394f53",
        "g": "51a58076f8fc9c94",
        "name": "Debug: Add Row to Sheet",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 260,
        "wires": []
    }
]